# This file was generated by jschema_to_python version 1.2.3.

from ._address import Address
from ._artifact import Artifact
from ._artifact_location import ArtifactLocation
from ._conversion import Conversion
from ._external_property_file_references import ExternalPropertyFileReferences
from ._graph import Graph
from ._invocation import Invocation
from ._logical_location import LogicalLocation
from ._property_bag import PropertyBag
from ._result import Result
from ._run_automation_details import RunAutomationDetails
from ._special_locations import SpecialLocations
from ._thread_flow_location import ThreadFlowLocation
from ._tool import Tool
from ._tool_component import ToolComponent
from ._version_control_details import VersionControlDetails
from ._web_request import WebRequest
from ._web_response import WebResponse
from attrs import define
from attrs import field


@define()
class Run:
    """Describes a single run of an analysis tool, and contains the reported output of that run."""

    tool : Tool = field(metadata={"schema_property_name": "tool"})
    addresses : list[Address] = field(factory=list, metadata={"schema_property_name": "addresses"})
    artifacts : list[Artifact] = field(factory=list, metadata={"schema_property_name": "artifacts"})
    automation_details : RunAutomationDetails = field(default=None, metadata={"schema_property_name": "automationDetails"})
    baseline_guid : str = field(default=None, metadata={"schema_property_name": "baselineGuid"})
    column_kind : str = field(default=None, metadata={"schema_property_name": "columnKind"})
    conversion : Conversion = field(default=None, metadata={"schema_property_name": "conversion"})
    default_encoding : str = field(default=None, metadata={"schema_property_name": "defaultEncoding"})
    default_source_language : str = field(default=None, metadata={"schema_property_name": "defaultSourceLanguage"})
    external_property_file_references : ExternalPropertyFileReferences = field(default=None, metadata={"schema_property_name": "externalPropertyFileReferences"})
    graphs : list[Graph] = field(factory=list, metadata={"schema_property_name": "graphs"})
    invocations : list[Invocation] = field(factory=list, metadata={"schema_property_name": "invocations"})
    language : str = field(default="en-US", metadata={"schema_property_name": "language"})
    logical_locations : list[LogicalLocation] = field(factory=list, metadata={"schema_property_name": "logicalLocations"})
    newline_sequences : list[str] = field(factory=lambda: ['\r\n', '\n'], metadata={"schema_property_name": "newlineSequences"})
    original_uri_base_ids : dict[str, ArtifactLocation] = field(default=None, metadata={"schema_property_name": "originalUriBaseIds"})
    policies : list[ToolComponent] = field(factory=list, metadata={"schema_property_name": "policies"})
    properties : PropertyBag = field(default=None, metadata={"schema_property_name": "properties"})
    redaction_tokens : list[str] = field(factory=list, metadata={"schema_property_name": "redactionTokens"})
    results : list[Result] = field(factory=list, metadata={"schema_property_name": "results"})
    run_aggregates : list[RunAutomationDetails] = field(factory=list, metadata={"schema_property_name": "runAggregates"})
    special_locations : SpecialLocations = field(default=None, metadata={"schema_property_name": "specialLocations"})
    taxonomies : list[ToolComponent] = field(factory=list, metadata={"schema_property_name": "taxonomies"})
    thread_flow_locations : list[ThreadFlowLocation] = field(factory=list, metadata={"schema_property_name": "threadFlowLocations"})
    translations : list[ToolComponent] = field(factory=list, metadata={"schema_property_name": "translations"})
    version_control_provenance : list[VersionControlDetails] = field(factory=list, metadata={"schema_property_name": "versionControlProvenance"})
    web_requests : list[WebRequest] = field(factory=list, metadata={"schema_property_name": "webRequests"})
    web_responses : list[WebResponse] = field(factory=list, metadata={"schema_property_name": "webResponses"})
